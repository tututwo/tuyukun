import{S as wo,i as yo,s as go,k as o,q as a,a as r,y as tn,l,m as i,r as s,h as e,c as u,z as en,n as f,D as Oo,b as c,E as n,A as nn,F as Mo,g as an,d as sn,B as on}from"./index.743a3fa8.js";import{B as ln}from"./blogHeading.5eddd219.js";function Io(uo){let S,pn,ce,st,Et,cn,re,P,rn,bt,un,fn,ue,T,dn,_t,hn,mn,fe,G,de,ot,kn,he,lt,W,$,wt,vn,me,it,En,ke,K,fo=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> abc <span class="token keyword">from</span> <span class="token string">"./abc.js"</span>

  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> onMount <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"svelte"</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`,ve,pt,bn,Ee,F,ho=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">2</span>

  <span class="token keyword">function</span> <span class="token function">thisGetsCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token function">thisGetsCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">function</span> <span class="token function">thisNotCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token comment">// because I didn't invoke it: thisNotCalled()</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`,be,ct,_n,_e,Q,mo=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">function</span> <span class="token function">thisGetsCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">thisAlsoCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token function">thisAlsoCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">thisGetsCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`,we,v,wn,yt,yn,gn,gt,On,Mn,Ot,In,ye,g,Dn,J,Cn,Sn,O,Pn,Mt,Tn,$n,It,qn,xn,ge,Y,Oe,m,An,Dt,zn,Ln,Ct,Rn,Un,St,Nn,Hn,Me,q,x,Pt,jn,Ie,_,Bn,Tt,Gn,Wn,$t,Kn,Fn,De,d,Qn,qt,Jn,Yn,V,Vn,Xn,xt,Zn,ta,At,ea,na,Ce,M,A,zt,aa,Lt,sa,Se,z,E,oa,Rt,la,ia,Ut,pa,ca,Nt,ra,ua,fa,rt,Ht,da,ha,Pe,X,Te,ut,ma,$e,w,cs,qe,h,jt,ka,va,Bt,Ea,ba,Gt,_a,wa,Wt,ya,ga,xe,Z,Ae,k,Oa,Kt,Ma,Ia,Ft,Da,Ca,Qt,Sa,Pa,ze,L,Ta,Jt,$a,qa,Le,I,R,Yt,xa,Vt,Aa,Re,ft,Xt,b,za,Zt,La,Ra,te,Ua,Na,ee,Ha,ja,Ue,U,Ba,dt,ne,Ga,Wa,Ka,Ne,ht,Fa,He,tt,ae,Qa,Ja,je,et,se,Ya,Va,Be,nt,ko=`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">changeTheDOM</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token keyword">await</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token function">doThisOnceDOMChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`,Ge,D,oe,Xa,Za,le,ts,es,We,mt,ns,Ke;return G=new ln({props:{heading:"The Early Stage"}}),Y=new ln({props:{heading:"A Bit Later: Mounting"}}),X=new ln({props:{heading:"Svelte's Updating Pattern"}}),Z=new ln({props:{heading:"Svelte's Updating Pattern"}}),{c(){S=o("p"),pn=a("I often see"),ce=r(),st=o("blockquote"),Et=o("p"),cn=a("this must be called during component initialisation"),re=r(),P=o("p"),rn=a("in Svelte’s docs, but what exactly is "),bt=o("strong"),un=a("Component Initialization"),fn=a("???"),ue=r(),T=o("p"),dn=a("After inquiring some smart people on the Internet, I would like to jog down some notes about what’s included in "),_t=o("strong"),hn=a("Component Initialization"),mn=a(" in case of forgetting it again, like I always do."),fe=r(),tn(G.$$.fragment),de=r(),ot=o("p"),kn=a("TL DR:"),he=r(),lt=o("blockquote"),W=o("h5"),$=o("a"),wt=o("span"),vn=a("Component initialization includes everything you write in .svelte, but callbacks."),me=r(),it=o("p"),En=a("It includes those imports:"),ke=r(),K=o("pre"),ve=r(),pt=o("p"),bn=a("Sync tasks:"),Ee=r(),F=o("pre"),be=r(),ct=o("p"),_n=a("Microtasks that are schedule to run."),_e=r(),Q=o("pre"),we=r(),v=o("p"),wn=a("Macrotasks like "),yt=o("code"),yn=a("setTimeOut"),gn=a(" runs during "),gt=o("strong"),On=a("Component Initialization"),Mn=a(" but not whatever is scheduled to run(aka, callbacks) inside it for whatever inside it is considered as "),Ot=o("em"),In=a("callbacks"),ye=r(),g=o("p"),Dn=a("Lihau has this wonderful "),J=o("a"),Cn=a("thread"),Sn=a(" about Component Initialization, and he introduced this trick: "),O=o("em"),Pn=a("In "),Mt=o("code"),Tn=a("<script>"),$n=a(", put everything inside ONE function. Whatever runs at the first time runs during "),It=o("strong"),qn=a("Component Initialization"),xn=a("."),ge=r(),tn(Y.$$.fragment),Oe=r(),m=o("p"),An=a("Basically when "),Dt=o("code"),zn=a("<scirpt>"),Ln=a(" is run. Elements defined in "),Ct=o("em"),Rn=a(".svelte"),Un=a(", the component, is added to the DOM. This step is called "),St=o("strong"),Nn=a("component mouting"),Hn=a("."),Me=r(),q=o("h2"),x=o("a"),Pt=o("span"),jn=a("The End: Stuff inside onMount()"),Ie=r(),_=o("p"),Bn=a("If I defined "),Tt=o("code"),Gn=a("onMount"),Wn=a(" earlier, I know "),$t=o("code"),Kn=a("onMount"),Fn=a(" is run, but not its callback. Guess what, right now is the time!"),De=r(),d=o("p"),Qn=a("Stuff inside "),qt=o("code"),Jn=a("onMount"),Yn=a(" looks around see what’s available, then RUN. In this "),V=o("a"),Vn=a("stackoverflow"),Xn=a(" answer, it points out the difference between using "),xt=o("code"),Zn=a("onMount"),ta=a(" and "),At=o("code"),ea=a("setTimeOut"),na=a(" is about what’s available."),Ce=r(),M=o("h6"),A=o("a"),zt=o("span"),aa=a("A bit about lifecycle functions: "),Lt=o("code"),sa=a("onMount()"),Se=r(),z=o("blockquote"),E=o("p"),oa=a("Lifecycle functions like "),Rt=o("code"),la=a("onMount"),ia=a(" to me are more like a timer. It marks some point on the timeline of Svelte’s working progress. For example, "),Ut=o("code"),pa=a("onMount"),ca=a(" marks the point right after when the component is mounted. It is a relative time point: if I got a lot of elements to add and large data to load, then statements inside "),Nt=o("code"),ra=a("onMount"),ua=a(" would not for a while. It just waits until things all get loaded."),fa=r(),rt=o("p"),Ht=o("code"),da=a("setTimeOut(()=>{}, 1000)"),ha=a(" then marks an absolute point of the timeline: 1 second. Regardless of loading data or mouting component, its callback just got push to the task queue to run after 1 second."),Pe=r(),tn(X.$$.fragment),Te=a(`
While making data visualization using Svelte, I often want to add animation or transition in Svelte. Sometimes I don't get to see any animation playing. Why? It's all due to Svelte's special updating pattern.
`),ut=o("p"),ma=a("If I want to change/update DOM elements via clicking a button:"),$e=r(),w=o("iframe"),qe=r(),h=o("p"),jt=o("code"),ka=a("foo"),va=a(" and "),Bt=o("code"),Ea=a("bar"),ba=a(" are changed to 2 and 5 respectively, and they are according to "),Gt=o("code"),_a=a("console.log()"),wa=a(". However, when I try to log the DOM element’s content, I still see the old "),Wt=o("code"),ya=a("1+2=3"),ga=a(". WHY???"),xe=r(),tn(Z.$$.fragment),Ae=a(`
To put it in my words in this case:
`),k=o("p"),Oa=a("When I change those variables in "),Kt=o("code"),Ma=a("<script>"),Ia=a(", they are changed in "),Ft=o("code"),Da=a("<script>"),Ca=a(". Once Svelte is about to compile the code to "),Qt=o("code"),Sa=a(".js"),Pa=a(" to update the DOM, this very action is batched!"),ze=r(),L=o("p"),Ta=a("Svelte is kind of saying: "),Jt=o("em"),$a=a("Hey, you sync task go first, I will keep collecting those pending changes to be made in the DOM"),qa=a(". Once those tasks are done, aka before the next micro task, DOM then gets updated."),Le=r(),I=o("h6"),R=o("a"),Yt=o("span"),xa=a("A bit about "),Vt=o("code"),Aa=a("beforeUpdate()"),Re=r(),ft=o("blockquote"),Xt=o("p"),b=o("em"),za=a("Watch out: lifecycle function alter:"),Zt=o("code"),La=a("beforeUpdate()"),Ra=a(". Like "),te=o("code"),Ua=a("onMount"),Na=a(" and other lifecycle functions, it marks a point on Svelte’s working timeline. This point happen to be right before DOM gets updated. Statements inside "),ee=o("code"),Ha=a("beforeUpdate()"),ja=a(" will run right before those pending state changes are about to be exectioned."),Ue=r(),U=o("p"),Ba=a("Consequently, "),dt=o("strong"),ne=o("code"),Ga=a("console.log(DOMElement)"),Wa=a(" happens before DOM is actually changed!"),Ka=a(" Because the subsequent changes in DOM are artifically halted by Svelte."),Ne=r(),ht=o("p"),Fa=a("My take home message here is : maybe be careful when code that can change DOM is followed by code to implement once DOM is changed. The later code probably won’t run successfully."),He=r(),tt=o("p"),ae=o("strong"),Qa=a("BUT"),Ja=a("!"),je=r(),et=o("p"),se=o("code"),Ya=a("tick()"),Va=a(" can give you some help:"),Be=r(),nt=o("pre"),Ge=r(),D=o("p"),oe=o("code"),Xa=a("tick()"),Za=a(" basically cashed in those "),le=o("em"),ts=a("pending state changes"),es=a(": Don’t wait. Just do it now!"),We=r(),mt=o("p"),ns=a("I made an outline of Svelte’s component initialization and updating process, and I hope it’s useful."),this.h()},l(t){S=l(t,"P",{});var p=i(S);pn=s(p,"I often see"),p.forEach(e),ce=u(t),st=l(t,"BLOCKQUOTE",{});var rs=i(st);Et=l(rs,"P",{});var us=i(Et);cn=s(us,"this must be called during component initialisation"),us.forEach(e),rs.forEach(e),re=u(t),P=l(t,"P",{});var Fe=i(P);rn=s(Fe,"in Svelte’s docs, but what exactly is "),bt=l(Fe,"STRONG",{});var fs=i(bt);un=s(fs,"Component Initialization"),fs.forEach(e),fn=s(Fe,"???"),Fe.forEach(e),ue=u(t),T=l(t,"P",{});var Qe=i(T);dn=s(Qe,"After inquiring some smart people on the Internet, I would like to jog down some notes about what’s included in "),_t=l(Qe,"STRONG",{});var ds=i(_t);hn=s(ds,"Component Initialization"),ds.forEach(e),mn=s(Qe," in case of forgetting it again, like I always do."),Qe.forEach(e),fe=u(t),en(G.$$.fragment,t),de=u(t),ot=l(t,"P",{});var hs=i(ot);kn=s(hs,"TL DR:"),hs.forEach(e),he=u(t),lt=l(t,"BLOCKQUOTE",{});var ms=i(lt);W=l(ms,"H5",{id:!0});var as=i(W);$=l(as,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ks=i($);wt=l(ks,"SPAN",{class:!0}),i(wt).forEach(e),ks.forEach(e),vn=s(as,"Component initialization includes everything you write in .svelte, but callbacks."),as.forEach(e),ms.forEach(e),me=u(t),it=l(t,"P",{});var vs=i(it);En=s(vs,"It includes those imports:"),vs.forEach(e),ke=u(t),K=l(t,"PRE",{class:!0});var vo=i(K);vo.forEach(e),ve=u(t),pt=l(t,"P",{});var Es=i(pt);bn=s(Es,"Sync tasks:"),Es.forEach(e),Ee=u(t),F=l(t,"PRE",{class:!0});var Eo=i(F);Eo.forEach(e),be=u(t),ct=l(t,"P",{});var bs=i(ct);_n=s(bs,"Microtasks that are schedule to run."),bs.forEach(e),_e=u(t),Q=l(t,"PRE",{class:!0});var bo=i(Q);bo.forEach(e),we=u(t),v=l(t,"P",{});var at=i(v);wn=s(at,"Macrotasks like "),yt=l(at,"CODE",{});var _s=i(yt);yn=s(_s,"setTimeOut"),_s.forEach(e),gn=s(at," runs during "),gt=l(at,"STRONG",{});var ws=i(gt);On=s(ws,"Component Initialization"),ws.forEach(e),Mn=s(at," but not whatever is scheduled to run(aka, callbacks) inside it for whatever inside it is considered as "),Ot=l(at,"EM",{});var ys=i(Ot);In=s(ys,"callbacks"),ys.forEach(e),at.forEach(e),ye=u(t),g=l(t,"P",{});var ie=i(g);Dn=s(ie,"Lihau has this wonderful "),J=l(ie,"A",{href:!0,rel:!0});var gs=i(J);Cn=s(gs,"thread"),gs.forEach(e),Sn=s(ie," about Component Initialization, and he introduced this trick: "),O=l(ie,"EM",{});var kt=i(O);Pn=s(kt,"In "),Mt=l(kt,"CODE",{});var Os=i(Mt);Tn=s(Os,"<script>"),Os.forEach(e),$n=s(kt,", put everything inside ONE function. Whatever runs at the first time runs during "),It=l(kt,"STRONG",{});var Ms=i(It);qn=s(Ms,"Component Initialization"),Ms.forEach(e),xn=s(kt,"."),kt.forEach(e),ie.forEach(e),ge=u(t),en(Y.$$.fragment,t),Oe=u(t),m=l(t,"P",{});var N=i(m);An=s(N,"Basically when "),Dt=l(N,"CODE",{});var Is=i(Dt);zn=s(Is,"<scirpt>"),Is.forEach(e),Ln=s(N," is run. Elements defined in "),Ct=l(N,"EM",{});var Ds=i(Ct);Rn=s(Ds,".svelte"),Ds.forEach(e),Un=s(N,", the component, is added to the DOM. This step is called "),St=l(N,"STRONG",{});var Cs=i(St);Nn=s(Cs,"component mouting"),Cs.forEach(e),Hn=s(N,"."),N.forEach(e),Me=u(t),q=l(t,"H2",{id:!0});var ss=i(q);x=l(ss,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ss=i(x);Pt=l(Ss,"SPAN",{class:!0}),i(Pt).forEach(e),Ss.forEach(e),jn=s(ss,"The End: Stuff inside onMount()"),ss.forEach(e),Ie=u(t),_=l(t,"P",{});var vt=i(_);Bn=s(vt,"If I defined "),Tt=l(vt,"CODE",{});var Ps=i(Tt);Gn=s(Ps,"onMount"),Ps.forEach(e),Wn=s(vt," earlier, I know "),$t=l(vt,"CODE",{});var Ts=i($t);Kn=s(Ts,"onMount"),Ts.forEach(e),Fn=s(vt," is run, but not its callback. Guess what, right now is the time!"),vt.forEach(e),De=u(t),d=l(t,"P",{});var y=i(d);Qn=s(y,"Stuff inside "),qt=l(y,"CODE",{});var $s=i(qt);Jn=s($s,"onMount"),$s.forEach(e),Yn=s(y," looks around see what’s available, then RUN. In this "),V=l(y,"A",{href:!0,rel:!0});var qs=i(V);Vn=s(qs,"stackoverflow"),qs.forEach(e),Xn=s(y," answer, it points out the difference between using "),xt=l(y,"CODE",{});var xs=i(xt);Zn=s(xs,"onMount"),xs.forEach(e),ta=s(y," and "),At=l(y,"CODE",{});var As=i(At);ea=s(As,"setTimeOut"),As.forEach(e),na=s(y," is about what’s available."),y.forEach(e),Ce=u(t),M=l(t,"H6",{id:!0});var Je=i(M);A=l(Je,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var zs=i(A);zt=l(zs,"SPAN",{class:!0}),i(zt).forEach(e),zs.forEach(e),aa=s(Je,"A bit about lifecycle functions: "),Lt=l(Je,"CODE",{});var Ls=i(Lt);sa=s(Ls,"onMount()"),Ls.forEach(e),Je.forEach(e),Se=u(t),z=l(t,"BLOCKQUOTE",{});var Ye=i(z);E=l(Ye,"P",{});var H=i(E);oa=s(H,"Lifecycle functions like "),Rt=l(H,"CODE",{});var Rs=i(Rt);la=s(Rs,"onMount"),Rs.forEach(e),ia=s(H," to me are more like a timer. It marks some point on the timeline of Svelte’s working progress. For example, "),Ut=l(H,"CODE",{});var Us=i(Ut);pa=s(Us,"onMount"),Us.forEach(e),ca=s(H," marks the point right after when the component is mounted. It is a relative time point: if I got a lot of elements to add and large data to load, then statements inside "),Nt=l(H,"CODE",{});var Ns=i(Nt);ra=s(Ns,"onMount"),Ns.forEach(e),ua=s(H," would not for a while. It just waits until things all get loaded."),H.forEach(e),fa=u(Ye),rt=l(Ye,"P",{});var os=i(rt);Ht=l(os,"CODE",{});var Hs=i(Ht);da=s(Hs,"setTimeOut(()=>{}, 1000)"),Hs.forEach(e),ha=s(os," then marks an absolute point of the timeline: 1 second. Regardless of loading data or mouting component, its callback just got push to the task queue to run after 1 second."),os.forEach(e),Ye.forEach(e),Pe=u(t),en(X.$$.fragment,t),Te=s(t,`
While making data visualization using Svelte, I often want to add animation or transition in Svelte. Sometimes I don't get to see any animation playing. Why? It's all due to Svelte's special updating pattern.
`),ut=l(t,"P",{});var js=i(ut);ma=s(js,"If I want to change/update DOM elements via clicking a button:"),js.forEach(e),$e=u(t),w=l(t,"IFRAME",{src:!0,width:!0,height:!0,title:!0}),i(w).forEach(e),qe=u(t),h=l(t,"P",{});var C=i(h);jt=l(C,"CODE",{});var Bs=i(jt);ka=s(Bs,"foo"),Bs.forEach(e),va=s(C," and "),Bt=l(C,"CODE",{});var Gs=i(Bt);Ea=s(Gs,"bar"),Gs.forEach(e),ba=s(C," are changed to 2 and 5 respectively, and they are according to "),Gt=l(C,"CODE",{});var Ws=i(Gt);_a=s(Ws,"console.log()"),Ws.forEach(e),wa=s(C,". However, when I try to log the DOM element’s content, I still see the old "),Wt=l(C,"CODE",{});var Ks=i(Wt);ya=s(Ks,"1+2=3"),Ks.forEach(e),ga=s(C,". WHY???"),C.forEach(e),xe=u(t),en(Z.$$.fragment,t),Ae=s(t,`
To put it in my words in this case:
`),k=l(t,"P",{});var j=i(k);Oa=s(j,"When I change those variables in "),Kt=l(j,"CODE",{});var Fs=i(Kt);Ma=s(Fs,"<script>"),Fs.forEach(e),Ia=s(j,", they are changed in "),Ft=l(j,"CODE",{});var Qs=i(Ft);Da=s(Qs,"<script>"),Qs.forEach(e),Ca=s(j,". Once Svelte is about to compile the code to "),Qt=l(j,"CODE",{});var Js=i(Qt);Sa=s(Js,".js"),Js.forEach(e),Pa=s(j," to update the DOM, this very action is batched!"),j.forEach(e),ze=u(t),L=l(t,"P",{});var Ve=i(L);Ta=s(Ve,"Svelte is kind of saying: "),Jt=l(Ve,"EM",{});var Ys=i(Jt);$a=s(Ys,"Hey, you sync task go first, I will keep collecting those pending changes to be made in the DOM"),Ys.forEach(e),qa=s(Ve,". Once those tasks are done, aka before the next micro task, DOM then gets updated."),Ve.forEach(e),Le=u(t),I=l(t,"H6",{id:!0});var Xe=i(I);R=l(Xe,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Vs=i(R);Yt=l(Vs,"SPAN",{class:!0}),i(Yt).forEach(e),Vs.forEach(e),xa=s(Xe,"A bit about "),Vt=l(Xe,"CODE",{});var Xs=i(Vt);Aa=s(Xs,"beforeUpdate()"),Xs.forEach(e),Xe.forEach(e),Re=u(t),ft=l(t,"BLOCKQUOTE",{});var Zs=i(ft);Xt=l(Zs,"P",{});var to=i(Xt);b=l(to,"EM",{});var B=i(b);za=s(B,"Watch out: lifecycle function alter:"),Zt=l(B,"CODE",{});var eo=i(Zt);La=s(eo,"beforeUpdate()"),eo.forEach(e),Ra=s(B,". Like "),te=l(B,"CODE",{});var no=i(te);Ua=s(no,"onMount"),no.forEach(e),Na=s(B," and other lifecycle functions, it marks a point on Svelte’s working timeline. This point happen to be right before DOM gets updated. Statements inside "),ee=l(B,"CODE",{});var ao=i(ee);Ha=s(ao,"beforeUpdate()"),ao.forEach(e),ja=s(B," will run right before those pending state changes are about to be exectioned."),B.forEach(e),to.forEach(e),Zs.forEach(e),Ue=u(t),U=l(t,"P",{});var Ze=i(U);Ba=s(Ze,"Consequently, "),dt=l(Ze,"STRONG",{});var ls=i(dt);ne=l(ls,"CODE",{});var so=i(ne);Ga=s(so,"console.log(DOMElement)"),so.forEach(e),Wa=s(ls," happens before DOM is actually changed!"),ls.forEach(e),Ka=s(Ze," Because the subsequent changes in DOM are artifically halted by Svelte."),Ze.forEach(e),Ne=u(t),ht=l(t,"P",{});var oo=i(ht);Fa=s(oo,"My take home message here is : maybe be careful when code that can change DOM is followed by code to implement once DOM is changed. The later code probably won’t run successfully."),oo.forEach(e),He=u(t),tt=l(t,"P",{});var is=i(tt);ae=l(is,"STRONG",{});var lo=i(ae);Qa=s(lo,"BUT"),lo.forEach(e),Ja=s(is,"!"),is.forEach(e),je=u(t),et=l(t,"P",{});var ps=i(et);se=l(ps,"CODE",{});var io=i(se);Ya=s(io,"tick()"),io.forEach(e),Va=s(ps," can give you some help:"),ps.forEach(e),Be=u(t),nt=l(t,"PRE",{class:!0});var _o=i(nt);_o.forEach(e),Ge=u(t),D=l(t,"P",{});var pe=i(D);oe=l(pe,"CODE",{});var po=i(oe);Xa=s(po,"tick()"),po.forEach(e),Za=s(pe," basically cashed in those "),le=l(pe,"EM",{});var co=i(le);ts=s(co,"pending state changes"),co.forEach(e),es=s(pe,": Don’t wait. Just do it now!"),pe.forEach(e),We=u(t),mt=l(t,"P",{});var ro=i(mt);ns=s(ro,"I made an outline of Svelte’s component initialization and updating process, and I hope it’s useful."),ro.forEach(e),this.h()},h(){f(wt,"class","icon icon-link"),f($,"aria-hidden","true"),f($,"tabindex","-1"),f($,"href","#component-initialization-includes-everything-you-write-in-svelte-but-callbacks"),f(W,"id","component-initialization-includes-everything-you-write-in-svelte-but-callbacks"),f(K,"class","language-svelte"),f(F,"class","language-svelte"),f(Q,"class","language-svelte"),f(J,"href","https://twitter.com/lihautan/status/1396111979799093254"),f(J,"rel","nofollow"),f(Pt,"class","icon icon-link"),f(x,"aria-hidden","true"),f(x,"tabindex","-1"),f(x,"href","#the-end-stuff-inside-onmount"),f(q,"id","the-end-stuff-inside-onmount"),f(V,"href","https://stackoverflow.com/questions/61577631/sveltejs-components-with-or-without-onmount"),f(V,"rel","nofollow"),f(zt,"class","icon icon-link"),f(A,"aria-hidden","true"),f(A,"tabindex","-1"),f(A,"href","#a-bit-about-lifecycle-functions-onmount"),f(M,"id","a-bit-about-lifecycle-functions-onmount"),Oo(w.src,cs="https://svelte.dev/repl/7145bafa507a4bec8d8a9adb4a3cd9b5?version=3.44.2")||f(w,"src",cs),f(w,"width","100%"),f(w,"height","600"),f(w,"title","Svelte temperature each demo"),f(Yt,"class","icon icon-link"),f(R,"aria-hidden","true"),f(R,"tabindex","-1"),f(R,"href","#a-bit-about-beforeupdate"),f(I,"id","a-bit-about-beforeupdate"),f(nt,"class","language-html")},m(t,p){c(t,S,p),n(S,pn),c(t,ce,p),c(t,st,p),n(st,Et),n(Et,cn),c(t,re,p),c(t,P,p),n(P,rn),n(P,bt),n(bt,un),n(P,fn),c(t,ue,p),c(t,T,p),n(T,dn),n(T,_t),n(_t,hn),n(T,mn),c(t,fe,p),nn(G,t,p),c(t,de,p),c(t,ot,p),n(ot,kn),c(t,he,p),c(t,lt,p),n(lt,W),n(W,$),n($,wt),n(W,vn),c(t,me,p),c(t,it,p),n(it,En),c(t,ke,p),c(t,K,p),K.innerHTML=fo,c(t,ve,p),c(t,pt,p),n(pt,bn),c(t,Ee,p),c(t,F,p),F.innerHTML=ho,c(t,be,p),c(t,ct,p),n(ct,_n),c(t,_e,p),c(t,Q,p),Q.innerHTML=mo,c(t,we,p),c(t,v,p),n(v,wn),n(v,yt),n(yt,yn),n(v,gn),n(v,gt),n(gt,On),n(v,Mn),n(v,Ot),n(Ot,In),c(t,ye,p),c(t,g,p),n(g,Dn),n(g,J),n(J,Cn),n(g,Sn),n(g,O),n(O,Pn),n(O,Mt),n(Mt,Tn),n(O,$n),n(O,It),n(It,qn),n(O,xn),c(t,ge,p),nn(Y,t,p),c(t,Oe,p),c(t,m,p),n(m,An),n(m,Dt),n(Dt,zn),n(m,Ln),n(m,Ct),n(Ct,Rn),n(m,Un),n(m,St),n(St,Nn),n(m,Hn),c(t,Me,p),c(t,q,p),n(q,x),n(x,Pt),n(q,jn),c(t,Ie,p),c(t,_,p),n(_,Bn),n(_,Tt),n(Tt,Gn),n(_,Wn),n(_,$t),n($t,Kn),n(_,Fn),c(t,De,p),c(t,d,p),n(d,Qn),n(d,qt),n(qt,Jn),n(d,Yn),n(d,V),n(V,Vn),n(d,Xn),n(d,xt),n(xt,Zn),n(d,ta),n(d,At),n(At,ea),n(d,na),c(t,Ce,p),c(t,M,p),n(M,A),n(A,zt),n(M,aa),n(M,Lt),n(Lt,sa),c(t,Se,p),c(t,z,p),n(z,E),n(E,oa),n(E,Rt),n(Rt,la),n(E,ia),n(E,Ut),n(Ut,pa),n(E,ca),n(E,Nt),n(Nt,ra),n(E,ua),n(z,fa),n(z,rt),n(rt,Ht),n(Ht,da),n(rt,ha),c(t,Pe,p),nn(X,t,p),c(t,Te,p),c(t,ut,p),n(ut,ma),c(t,$e,p),c(t,w,p),c(t,qe,p),c(t,h,p),n(h,jt),n(jt,ka),n(h,va),n(h,Bt),n(Bt,Ea),n(h,ba),n(h,Gt),n(Gt,_a),n(h,wa),n(h,Wt),n(Wt,ya),n(h,ga),c(t,xe,p),nn(Z,t,p),c(t,Ae,p),c(t,k,p),n(k,Oa),n(k,Kt),n(Kt,Ma),n(k,Ia),n(k,Ft),n(Ft,Da),n(k,Ca),n(k,Qt),n(Qt,Sa),n(k,Pa),c(t,ze,p),c(t,L,p),n(L,Ta),n(L,Jt),n(Jt,$a),n(L,qa),c(t,Le,p),c(t,I,p),n(I,R),n(R,Yt),n(I,xa),n(I,Vt),n(Vt,Aa),c(t,Re,p),c(t,ft,p),n(ft,Xt),n(Xt,b),n(b,za),n(b,Zt),n(Zt,La),n(b,Ra),n(b,te),n(te,Ua),n(b,Na),n(b,ee),n(ee,Ha),n(b,ja),c(t,Ue,p),c(t,U,p),n(U,Ba),n(U,dt),n(dt,ne),n(ne,Ga),n(dt,Wa),n(U,Ka),c(t,Ne,p),c(t,ht,p),n(ht,Fa),c(t,He,p),c(t,tt,p),n(tt,ae),n(ae,Qa),n(tt,Ja),c(t,je,p),c(t,et,p),n(et,se),n(se,Ya),n(et,Va),c(t,Be,p),c(t,nt,p),nt.innerHTML=ko,c(t,Ge,p),c(t,D,p),n(D,oe),n(oe,Xa),n(D,Za),n(D,le),n(le,ts),n(D,es),c(t,We,p),c(t,mt,p),n(mt,ns),Ke=!0},p:Mo,i(t){Ke||(an(G.$$.fragment,t),an(Y.$$.fragment,t),an(X.$$.fragment,t),an(Z.$$.fragment,t),Ke=!0)},o(t){sn(G.$$.fragment,t),sn(Y.$$.fragment,t),sn(X.$$.fragment,t),sn(Z.$$.fragment,t),Ke=!1},d(t){t&&e(S),t&&e(ce),t&&e(st),t&&e(re),t&&e(P),t&&e(ue),t&&e(T),t&&e(fe),on(G,t),t&&e(de),t&&e(ot),t&&e(he),t&&e(lt),t&&e(me),t&&e(it),t&&e(ke),t&&e(K),t&&e(ve),t&&e(pt),t&&e(Ee),t&&e(F),t&&e(be),t&&e(ct),t&&e(_e),t&&e(Q),t&&e(we),t&&e(v),t&&e(ye),t&&e(g),t&&e(ge),on(Y,t),t&&e(Oe),t&&e(m),t&&e(Me),t&&e(q),t&&e(Ie),t&&e(_),t&&e(De),t&&e(d),t&&e(Ce),t&&e(M),t&&e(Se),t&&e(z),t&&e(Pe),on(X,t),t&&e(Te),t&&e(ut),t&&e($e),t&&e(w),t&&e(qe),t&&e(h),t&&e(xe),on(Z,t),t&&e(Ae),t&&e(k),t&&e(ze),t&&e(L),t&&e(Le),t&&e(I),t&&e(Re),t&&e(ft),t&&e(Ue),t&&e(U),t&&e(Ne),t&&e(ht),t&&e(He),t&&e(tt),t&&e(je),t&&e(et),t&&e(Be),t&&e(nt),t&&e(Ge),t&&e(D),t&&e(We),t&&e(mt)}}}const So={title:"Svelte Data Viz: Part 0 - Component Initialization and Updates",date:"2021-12-07",updated:"2022-09-06",categories:["svelte","javascript"],coverImage:"sveltekit-learn.png",coverWidth:16,coverHeight:9,excerpt:"Learn the fundamentals of SvelteKit by building a statically generated blog from scratch, with Markdown support, Sass, an API, and an RSS feed.",titleSection:["The Early Stage","A Bit Later: Mounting","Svelte's Updating Pattern"]};class Po extends wo{constructor(S){super(),yo(this,S,null,Io,go,{})}}export{Po as default,So as metadata};
